{
  "name": "doom_fire_JG",
  "id": "f5m83sPGP4brSRHbS",
  "sources": {
    "main": "\n/* DOOM Fire\n\n  from: https://forum.electromage.com/t/task-15-playing-with-fire/1225/2\n\n 2D Fire effect, with \"enhanced\" dragon's breath mode. The method is inspired by the low-res \n fire in the prehistoric PSX port of DOOM!  It uses no Perlin or other gradient, value or\n fractal noise.\n Details: https://fabiensanglard.net/doom_fire_psx/\n \n Requires a 2D display and an appropriate mapping function.\n\n MIT License\n \n Version  Author        Date      \n 1.0.0    JEM(ZRanger1) 05/13/2021\n*/ \n\n// display size - enter the dimensions of your matrix here\nvar width = 10;\nvar height = 10;\n\n// array is sized one row larger than display so we can permanently\n// store the \"source\" fire in the last row.\nvar arrayWidth = width + 2;\nvar arrayHeight = height + 1;\n\n// Global variables for rendering\nvar buffer1 = array(arrayWidth);   // main drawing surface\nvar buffer2 = array(arrayWidth);   // secondary drawing surface\nvar pb1, pb2;                      // buffer pointers for swapping\n\nvar baseHue = 0;\nvar baseBri = 0.6;\nexport var maxCooling = 0.34;  //default: 0.34 - how quickly flames die down  \nvar dragonMode = 0;     // 0: plain old fire, 1: dragon's breath\nvar breathTimer;        // dragon's breath cycle time\nvar wind = 0;           // default: 0, variable indicating direction of wind.\nvar frameTimer = 9999;  // accumulator for simulation timer\nvar perturb = perturbNormal;  // pointer to fn that plays with fire\nexport var timeAdjustment = 1.0; //JG - I made this to adjust the speed of rendering\n// UI\nexport function hsvPickerHue(h,s,v) {\n  baseHue = h;\n  baseBri = v;\n}\n\nexport function sliderTimeAdjustment(v) {\n  v = 1.0 - v\n  timeAdjustment = 1.0 + (2 * v);\n}\n\nexport function sliderFlameHeight(v) {\n  maxCooling = 0.25+((1-v) * 0.2)\n}\n\nexport function sliderDragonMode(v) {\n  dragonMode = (v > 0.5);\n  \n  if (dragonMode) {\n    perturb = perturbDragonBreath;\n  } else {\n    initBuffers();\n    perturb = perturbNormal;\n  }\n}\n\n// create 2 x 2D buffers for calculation, and one\n// to hold our background image.\nfunction allocateFrameBuffers() {\n  for (var i = 0; i < arrayWidth; i ++) {\n    buffer1[i] = array(arrayHeight);\n    buffer2[i] = array(arrayHeight);\n  }\n  pb1 = buffer1;\n  pb2 = buffer2;\n}\n\nfunction initBuffers() {\n  for (var i = 0; i < arrayWidth; i ++) {\n    pb1[i][arrayHeight - 1] = 1;\n    pb2[i][arrayHeight - 1] = 1;    \n  }\n}\n\nfunction perturbDragonBreath() {\n for (var i = 0; i < arrayWidth; i ++) {\n   pb2[i][arrayHeight - 1] = breathTimer+wave(-.21+(i/arrayWidth));\n  }\n}\n\n// change the base heat in a slow wave\nfunction perturbNormal() {\n for (var i = 0; i < arrayWidth; i ++) {\n   pb2[i][arrayHeight - 1] = 0.8+wave(triangle(time(0.3))+(i/arrayWidth))/3;\n  }\n}\n\n// change wind direction occasionally, always with a short reset to\n// zero wind between changes, to give us the look of periodic gusts.\nfunction getWindDirection(w) {\n  if (random(1) < 0.333) {\n    return (w != 0) ? 0 : random(3) - 1;\n  }\n}\n\nfunction swapBuffers()  {\n  var tmp = pb1; pb1 = pb2; pb2 = tmp;\n}\n\n\n// Fire is hottest at the bottom, and \"cools\" as it rises. Each pixel\n// calculates it's value based on the one below it, with allowance for\n// the current wind direction.\nfunction doFire() {\n  swapBuffers();\n  \n  wind = getWindDirection(wind);\n\n  for (var x = 1; x < width+1; x++) {\n    // weight wind effect -- high towards outside, low at center.\n    var c = (1-abs((x / width + 1) - 0.5)) * wind;\n    \n    // cooling effect decreases with height, so very hot particles\n    // that don't cool early on get \"carried\" farther.  It just looks better.\n    for (var y = 1; y < arrayHeight-1; y++) {\n      var r = (maxCooling * random(1)) * (y/(arrayHeight-1));\n      pb2[x+c][y] = max(0,pb1[x][y+1] - r);\n    }\n  }  \n}\n\n// Initialization\nallocateFrameBuffers();\ninitBuffers()\n\nexport function beforeRender(delta) {\n  frameTimer += delta / timeAdjustment;\n  breathTimer = wave(time(0.1));\n\n  if (frameTimer > 60) {\n    doFire();  \n    perturb();\n\n    frameTimer = 0;\n  }\n}\n\nexport function render2D(index, x, y) {\n  x = 1+floor(x * width);  \n  y = floor(y * height);\n  bri = pb2[x][y]; bri = bri * bri * bri;\n  hsv(baseHue+((0.05*bri)), 1.3-bri/4,bri * baseBri);\n}"
  },
  "preview": "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"
}