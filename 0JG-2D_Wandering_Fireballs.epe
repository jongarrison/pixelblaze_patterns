{
  "name": "0JG-2D_Wandering_Fireballs",
  "id": "CdW8KodTWpqT93dgN",
  "sources": {
    "main": "export var x0Ball = 0\nexport var y0Ball = 0\nexport var x1Ball = 0\nexport var y1Ball = 0\n\nvar distanceTolerance = 0.35 //higher number, bigger balls\nexport function distance(val, target) {\n  var diff = abs(val - target)\n  if (diff < distanceTolerance) {\n    return (distanceTolerance - diff) / distanceTolerance\n  } else {\n    return 0\n  }\n}\n\nexport function render2D(index, x, y) {\n  x0Bullseye = distance(x, x0Ball)\n  y0Bullseye = distance(y, y0Ball)\n\n  x1Bullseye = distance(x, x1Ball)\n  y1Bullseye = distance(y, y1Ball)\n\n  prod = (x0Bullseye * y0Bullseye) + (x1Bullseye * y1Bullseye)\n\n  t3Wave = wave(t3)\n  \n  if (prod < 0.2) {\n    //cold dark space\n    hsv(t3Wave, 0.5, 0.07)\n  } else {\n    //wandering plasma ball\n    hsv(\n      (prod > 0.94) ? t3Wave + 0.04 : t3Wave, //color shifts with very close proximity\n      (prod > 0.2) ? prod + 0.2 : 0.2, \n      prod - 0.1\n    )\n  }\n}\n\nvar t1 = 0\nvar t2 = 0\nvar t3 = 0\n\nexport function beforeRender(delta) {\n  t1 = time(.4)\n  t2 = time(.3)\n  t3 = time(.9)\n\n  \n  x0Ball = triangle(t1)\n  y0Ball = wave(t2)\n  \n  x1Ball = (1 - x0Ball)\n  y1Ball = wave(t3)\n}"
  },
  "preview": "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"
}