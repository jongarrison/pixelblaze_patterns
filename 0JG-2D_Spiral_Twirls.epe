{
  "name": "0JG-2D_Spiral_Twirls",
  "id": "rRZn44wPyNfsctpb2",
  "sources": {
    "main": "/**\r\n * A configurable 2D pattern that creates a variety of\r\n * rotating and swirling circular and spiral effects.\r\n * For best results a matrix of 16x16 or greater is recommended.\r\n * \r\n * I'd suggest starting with all the sliders at zero, then trying\r\n * each of them one at a time to see what impact it has on the\r\n * resultant pattern. That way it should be easier to understand\r\n * how to combine them all to get the effect you'd like.\r\n * \r\n * Pattern by @ChrisNZ\r\n * \r\n * Pattern slightly enlarged by @jongarrison\r\n */\r\nvar twistSpeed = 0.015\r\nvar rotateSpeed = 0.002\r\nvar startingColor = 0.3\r\nvar colorSpeed = 0.015\r\nvar twist\r\nvar rotation\r\nvar colorShift\r\nvar arms\r\n\r\n\r\n// How quickly the spiral should rotate back and forth\r\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How quickly the entire pattern should rotate\r\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : 0.005 / v }\r\n\r\n// What initial colors to display. If colorSpeed is zero then the pattern will\r\n// stay this color\r\nexport function sliderInitialColor(v) { startingColor = v * 2 }\r\n\r\n// How quickly the colors of the pattern should change\r\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How many arms of symmetry the pattern should have\r\nexport function sliderArms(v) { arms = v * 2 + 1; arms = arms - (arms - floor(arms)) }\r\n\r\nexport function beforeRender(delta) {\r\n  twist = wave(time(twistSpeed)) * 2 - 1\r\n  rotation = time(rotateSpeed)\r\n  colorShift = time(colorSpeed)\r\n}\r\n\r\nexport function render2D(index, x, y) {\r\n  xNorm = (x - 0.5) * 2\r\n  yNorm = (y - 0.5) * 2\r\n  dist = sqrt(xNorm * xNorm + yNorm * yNorm) * 0.8 //JG - This can affect the fill of the board\r\n  angle = (arctan2(yNorm, xNorm) + PI) / PI / 2\r\n  t = twist < 0 ? dist * twist : dist * twist\r\n  angle += t / 2\r\n  \r\n  setColor(angle, rotation, dist)\r\n}\r\n\r\nfunction setColor(angle, rotation, dist) {\r\n  h = angle * arms - rotation + 10\r\n  h = h - floor(h)\r\n  s = 1\r\n  v = (1.01 - dist) * (h < 0.5 ? h * h * h : h)\r\n  hsv((h + startingColor) / 2 + colorShift, s, v)\r\n}\r\n\r\n// Temporary fix/workaround until the built in atan2() is fixed\r\nfunction arctan2(y, x) {\r\n  if (x > 0) return atan(y/x)\r\n  if (y > 0) return PI / 2 - atan(x/y)\r\n  if (y < 0) return -PI / 2 - atan(x/y)\r\n  if (x < 0) return PI + atan(y/x)\r\n  return 1.0\r\n}"
  },
  "preview": ""
}