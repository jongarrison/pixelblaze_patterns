{
  "name": "2JG - fire - red",
  "id": "6PSRfyGB7SM64Nqen",
  "sources": {
    "main": "// init variables\n// these were tested with a 72-pixel APA102 strip, adjust to flavor\n  cooling = 0.045  // fire cooling rate\n  sparking = 0.45 // 0.45  // fire sparking rate\n  delay = 30 // 20  // delay between new frames\n  timer = 2 // 1  // accumulates delay between render passes\n  dirMode = 2  // direction (and symmetry) of fire\n    // one-sided:  0 - from head, 1 - from tail\n    // symmetric:  2 - from ends, 3 - from middle\n    if (dirMode < 2) {   // pixelCount with respect to dirMode\n      pixelsUsed = pixelCount\n    } else {\n      pixelsUsed = floor(pixelCount / 2)\n      cooling += 0.04  // use a little more cooling to match\n    }\n  heat = array(pixelsUsed)  // array to store 'temperature' of pixels\n  \n// create HeatColors 8-bit palette:  0x000000,\n  //  0x330000, 0x660000, 0x990000, 0xCC0000, 0xFF0000,\n  //  0xFF3300, 0xFF6600, 0xFF9900, 0xFFCC00, 0xFFFF00,\n  //  0xFFFF33, 0xFFFF66, 0xFFFF99, 0xFFFFCC, 0xFFFFFF\n\n  heatColors_r = array(256)\n  heatColors_g = array(256)\n  heatColors_b = array(256)\n  \n  for (i = 0; i < 256; i++) {\n    if (i < 85) { heatColors_r[i] = (i / 85) } else { heatColors_r[i] = 1 }\n    if (i >= 85) { if (i < 170) { heatColors_g[i] = ((i - 85) / 85) } else { heatColors_g[i] = 1 } }\n    if (i >= 170) { heatColors_b[i] = ((i - 170) / 85) }\n  }\n\nexport function beforeRender(delta) {\n  timer += delta\n  if (timer >= delay) {  // if enough time has passed, render next frame\n    timer -= delay\n\n    // step 1:  cool down the entire strip\n    for (i = 0; i < pixelsUsed; i++) {\n      heat[i] -= random(cooling)\n      heat[i] = clamp(heat[i],0,1)\n    }\n    // step 2:  carry heat 'up' the strip\n    for (i = pixelsUsed - 1; i >= 2; i--) {\n      heat[i] = (heat[i - 1] + heat[i - 2] + heat[i - 2]) / 3\n    }\n    // step 3:  add sparks to the base of the flame\n    if (sparking > random(1)) {\n      i = floor(random(pixelsUsed / 10))  // sparks form in first 10% of strip\n      heat[i] = heat[i] + random(0.37) + 0.63  // add a minimum amount of heat to the pixel\n      heat[i] = clamp(heat[i],0,1)\n    }\n\n  }  // end if (timer >= delay)\n\n}  // end export function beforeRender(delta)\n\nexport function render(index) {\n  if (dirMode == 0) {\n    heat_index = clamp(heat[index] * 256, 0, 255)\n  }\n  if (dirMode == 1) {\n    heat_index = clamp(heat[pixelsUsed - index - 1] * 256, 0, 255)\n  }\n  if (dirMode == 2) {\n    if (index < pixelsUsed) {\n      heat_index = clamp(heat[index] * 256, 0, 255)\n    } else {\n      heat_index = clamp(heat[(2 * pixelsUsed) - index - 1] * 256, 0, 255)\n    }\n  }\n  if (dirMode == 3) {\n    if (index < pixelsUsed) {\n      heat_index = clamp(heat[pixelsUsed - index - 1] * 256, 0, 255)\n    } else {\n      heat_index = clamp(heat[index - pixelsUsed] * 256, 0, 255)\n    }\n  }\n\n  r = heatColors_r[heat_index]\n  g = heatColors_g[heat_index]\n  b = heatColors_b[heat_index]\n  rgb(r, g, b)\n}  // end export function render(index)\n"
  },
  "preview": "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"
}