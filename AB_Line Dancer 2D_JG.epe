{
  "name": "AB_Line Dancer 2D_JG",
  "id": "cyJFEHERkhM3SKCYT",
  "sources": {
    "main": "// Twisting line effect - basic idea from a PC screensaver I saw\n// long, long ago.  No idea where.\n// Re-imagined to be uniquely Pixelblaze-y\n//\n// Now with twist control and kaleidoscopic mirroring\n// 10/26/2021 - ZRanger1\n\nvar timebase = 0;\nvar t1;\nvar zoom;\nexport var speed = 4.6;\nexport var twist = 1.75;\nexport var nSides = 1;\nvar slice = PI / nSides;\n\ntranslate(-0.5,-0.5);\n\nexport function sliderSpeed(v) {\n  // default: speed = 1+(9 * v); \n  speed = 0.5 + (4 * v); //9 coefficient\n}\n\nexport function sliderTwist(v) {\n  twist = 1.25 + (0.75 * v);\n}\n\nexport function sliderReflections(v) {\n  nSides = 1 + floor(6 * v);\n  slice = PI / nSides;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nvar outx, outy;\n\nfunction kal(x, y, t1) {\n  var angle = atan2(y, x);\n  angle = mod(angle, 2.0 * slice);\n  \n  // uncomment to reflect each slice so they can be tiled\n  // evenly if you like.\n  //angle = abs (angle - slice);\n  \n  // rotate image over time\n  angle += PI*timebase;\n  \n  // map new rotated coordinates back to original image space\n  var d = hypot(x,y);\n  outx = d * cos(angle);  outy = d * sin(angle);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  zoom = wave(time(0.075 * 10)); //JG - added \"* 10\"\n}\n\nexport function render2D(index,x,y) {\n  var h,b,radius,theta;  \n  \n  if (nSides > 1) { kal(x,y,t1); x = outx; y = outy; }\n  \n  radius = twist-hypot(x,y) * 2.4;\n  theta = radius * radius * sin(radius + t1);\n  x = (cos(theta) * x) - (sin(theta)* y);\n\n  b = 1-wave(x*4.6*zoom * 0.01);\n  h = (x * zoom)+ zoom + theta/PI2;\n  hsv(h,1,b*b);\n}"
  },
  "preview": "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"
}